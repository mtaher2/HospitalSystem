<%- include('../partials/header', {title: 'Appointments Doctor', stylesheetName: 'styles', headerTitle: 'Appointments Doctor' }) %>
<%- include('../partials/DoctorNav') %>

<div class="medication-container">
  <!-- Prescription Management Modal -->
  <div id="prescriptionModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Prescription Management</h2>
        <span class="close">&times;</span>
      </div>
      <div class="modal-body">
        <!-- Prescriptions Table -->
        <div class="table-wrapper">
          <h3>Current Prescriptions</h3>
          <table id="prescriptionsTable">
            <thead>
              <tr>
                <th>Medication</th>
                <th>Dosage</th>
                <th>Frequency</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Status</th>
                <th>Refill Times</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              <!-- Prescriptions will be loaded here dynamically -->
            </tbody>
          </table>
        </div>

        <!-- Add/Edit Prescription Form -->
        <div class="prescription-form">
          <h3 id="formTitle">Add New Prescription</h3>
          <form id="prescriptionForm">
            <input type="hidden" id="prescriptionId" name="prescriptionId">
            <div class="form-group">
              <label for="medicationName">Medication Name</label>
              <input type="text" id="medicationName" name="medicationName" required>
              <div class="suggestions"></div>
            </div>
            <div class="form-group">
              <label for="dosage">Dosage</label>
              <input type="text" id="dosage" name="dosage" required>
            </div>
            <div class="form-group">
              <label for="frequency">Frequency</label>
              <input type="text" id="frequency" name="frequency" required>
            </div>
            <div class="form-group">
              <label for="startDate">Start Date</label>
              <input type="date" id="startDate" name="startDate" required>
            </div>
            <div class="form-group">
              <label for="endDate">End Date</label>
              <input type="date" id="endDate" name="endDate" required>
            </div>
            <div class="form-group">
              <label for="refillTimes">Refill Times</label>
              <input type="number" id="refillTimes" name="refillTimes" min="0">
            </div>
            <div class="form-actions">
              <button type="submit" class="btn-save">Save</button>
              <button type="button" class="btn-cancel" onclick="resetForm()">Cancel</button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>

  <div class="search-container">
    <form id="filterForm" method="GET" action="/doctor-appointment" class="filter-form">
      <div class="filter-group">
        <label for="filterPatient">Patient</label>
        <input
          type="text"
          id="filterPatient"
          name="patient"
          class="filter-input"
          placeholder="Patient's name"
        />
      </div>
      <div class="filter-group">
        <label for="filterDate">Date</label>
        <input
          type="date"
          id="filterDate"
          name="date"
          class="filter-input"
        />
      </div>
    </form>
  </div>

  <div class="content-body">
    <div class="table-wrapper">
      <table>
        <thead>
          <tr>
            <th>Name</th>
            <th>Date</th>
            <th>Time</th>
            <th>Status</th>
            <th>PR</th>
            <th>Prescription</th>
          </tr>
        </thead>
        <tbody id="appointmentsTable">
          <% if (appointments && appointments.length > 0) { %>
            <% appointments.forEach(appointment => { %>
              <tr>
                <td><%= appointment.patientName %></td>
                <td><%= appointment.appointmentDate %></td>
                <td><%= appointment.appointmentTime %></td>
                <td><%= appointment.status %></td>
                <td>
                  <a
                    href="/healthStatistics"
                    class="btn-show doc-btn"
                    data-patient-id="<%= appointment.patientID %>"
                  >
                    Show
                  </a>
                </td>
                <td>
                  <a href="/doctor-prescription" data-patient-id="<%= appointment.patientID %>" class="btn-order doc-btn">Write</a>
                </td>
              </tr>
            <% }); %>
          <% } else { %>
            <tr>
              <td colspan="6">No appointments found for this doctor.</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>
  </div>
</div>

<style>
/* Add these styles to your existing styles */
.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.5);
}

.modal-content {
  background-color: #fefefe;
  margin: 5% auto;
  padding: 20px;
  border: 1px solid #888;
  width: 80%;
  max-width: 1000px;
  border-radius: 8px;
  max-height: 90vh;
  overflow-y: auto;
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.close {
  color: #aaa;
  font-size: 28px;
  font-weight: bold;
  cursor: pointer;
}

.close:hover {
  color: black;
}

.prescription-form {
  margin-top: 20px;
  padding: 20px;
  background: #f8f9fa;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.form-group {
  margin-bottom: 15px;
}

.form-group label {
  display: block;
  margin-bottom: 5px;
  font-weight: 500;
}

.form-group input {
  width: 100%;
  padding: 8px;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.form-actions {
  margin-top: 20px;
}

.btn-save, .btn-cancel {
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  margin-right: 10px;
}

.btn-save {
  background-color: #28a745;
  color: white;
}

.btn-cancel {
  background-color: #6c757d;
  color: white;
}

.suggestions {
  position: absolute;
  background: white;
  border: 1px solid #ddd;
  border-radius: 4px;
  max-height: 200px;
  overflow-y: auto;
  width: 100%;
  z-index: 1000;
}

.suggestion-item {
  padding: 8px;
  cursor: pointer;
}

.suggestion-item:hover {
  background-color: #f8f9fa;
}

.btn-edit, .btn-delete {
  padding: 5px 10px;
  margin: 0 5px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.btn-edit {
  background-color: #007bff;
  color: white;
}

.btn-delete {
  background-color: #dc3545;
  color: white;
}

.btn-edit:hover {
  background-color: #0056b3;
}

.btn-delete:hover {
  background-color: #c82333;
}

#prescriptionsTable tr {
  transition: background-color 0.2s;
}

#prescriptionsTable tr:hover {
  background-color: #f8f9fa;
}
</style>

<script>
  let debounceTimer;

  function debounceFilter() {
    clearTimeout(debounceTimer);

    debounceTimer = setTimeout(() => {
      const patient = document.getElementById("filterPatient").value;
      const date = document.getElementById("filterDate").value;

      fetch(`/doctor-appointment?patient=${encodeURIComponent(patient)}&date=${encodeURIComponent(date)}`, {
        headers: {
          'Accept': 'application/json',
        },
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json(); 
        })
        .then((data) => {
          const tableBody = document.getElementById("appointmentsTable");
          tableBody.innerHTML = ""; 

          if (data.length > 0) {
            data.forEach((appointment) => {
              const row = document.createElement("tr");
              row.innerHTML = `
                <td>${appointment.patientName}</td>
                <td>${appointment.appointmentDate}</td>
                <td>${appointment.appointmentTime}</td>
                <td>${appointment.status}</td>
                <td>
                  <a
                    href="/healthStatistics"
                    class="btn-show doc-btn"
                    data-patient-id="${appointment.patientID}"
                  >
                    Show
                  </a>
                </td>
                <td>
                  <a href="/doctor-prescription" data-patient-id="${appointment.patientID}" class="btn-order doc-btn">Write</a>
                </td>
              `;
              tableBody.appendChild(row);
            });
          } else {
            tableBody.innerHTML = `<tr><td colspan="6">No appointments found for this doctor.</td></tr>`;
          }
        })
        .catch((error) => console.error("Error fetching filtered data:", error));
    }, 500); 
  }

  document.addEventListener("DOMContentLoaded", () => {
  // Add debounce filter to inputs
  const inputs = document.querySelectorAll(".filter-input");
  inputs.forEach((input) => {
    input.addEventListener("input", debounceFilter);
  });

  // Handle dynamic button clicks
  document.body.addEventListener("click", (event) => {
    const target = event.target;

    // PR button click
    if (target.classList.contains("btn-show")) {
      event.preventDefault(); // Prevent default anchor behavior
      const patientID = target.getAttribute("data-patient-id");

      fetch(`/setGlobalPatientID`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ patientID }),
      })
        .then((response) => response.json())
        .then((data) => {
          if (data.message === "Global patient ID set successfully.") {
            window.location.href = "/healthStatistics";
          }
        })
        .catch((error) => console.error("Error setting patient ID:", error));
    }

    // "Write" button click
    if (target.classList.contains("btn-order")) {
      event.preventDefault();
      const patientID = target.getAttribute("data-patient-id");
      openPrescriptionModal(patientID);
    }
  });
});

// Add these functions to your existing script
let currentPatientId = null;

function openPrescriptionModal(patientId) {
  currentPatientId = patientId;
  const modal = document.getElementById('prescriptionModal');
  modal.style.display = 'block';
  loadPrescriptions(patientId);
}

function closePrescriptionModal() {
  const modal = document.getElementById('prescriptionModal');
  modal.style.display = 'none';
  resetForm();
}

async function loadPrescriptions(patientId) {
  try {
    const response = await fetch(`/api/prescriptions?patientId=${patientId}`);
    const data = await response.json();
    
    const tbody = document.querySelector('#prescriptionsTable tbody');
    tbody.innerHTML = '';
    
    if (data.prescriptions && data.prescriptions.length > 0) {
      data.prescriptions.forEach(prescription => {
        const row = document.createElement('tr');
        row.setAttribute('data-prescription-id', prescription.Prescription_ID);
        row.innerHTML = `
          <td>${prescription.Medication_Name}</td>
          <td>${prescription.Dosage}</td>
          <td>${prescription.Frequency}</td>
          <td>${new Date(prescription.Start_Date).toLocaleDateString()}</td>
          <td>${new Date(prescription.End_Date).toLocaleDateString()}</td>
          <td>${prescription.Status}</td>
          <td>${prescription.Refill_Times}</td>
          <td>
            <button class="btn-edit" onclick="editPrescription(${prescription.Prescription_ID})">Edit</button>
            <button class="btn-delete" onclick="deletePrescription(${prescription.Prescription_ID})">Delete</button>
          </td>
        `;
        tbody.appendChild(row);
      });
    } else {
      tbody.innerHTML = '<tr><td colspan="8">No prescriptions found.</td></tr>';
    }
  } catch (error) {
    console.error('Error loading prescriptions:', error);
  }
}

// Add event listeners for the modal
document.addEventListener('DOMContentLoaded', function() {
  const modal = document.getElementById('prescriptionModal');
  const closeBtn = document.querySelector('.close');
  
  closeBtn.onclick = closePrescriptionModal;
  
  window.onclick = function(event) {
    if (event.target == modal) {
      closePrescriptionModal();
    }
  }

  const form = document.getElementById('prescriptionForm');
  const medicationInput = document.getElementById('medicationName');
  const suggestionsDiv = document.querySelector('.suggestions');

  // Handle medication suggestions
  medicationInput.addEventListener('input', async function() {
    const query = this.value;
    if (query.length > 0) {
      try {
        const response = await fetch(`/medication-suggestions?query=${encodeURIComponent(query)}`);
        const data = await response.json();
        
        suggestionsDiv.innerHTML = '';
        data.forEach(item => {
          const div = document.createElement('div');
          div.className = 'suggestion-item';
          div.textContent = item.Medication_Name;
          div.onclick = () => {
            medicationInput.value = item.Medication_Name;
            suggestionsDiv.innerHTML = '';
          };
          suggestionsDiv.appendChild(div);
        });
      } catch (error) {
        console.error('Error fetching suggestions:', error);
      }
    } else {
      suggestionsDiv.innerHTML = '';
    }
  });

  // Handle form submission
  form.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = {
      prescriptionId: document.getElementById('prescriptionId').value,
      medicationName: document.getElementById('medicationName').value,
      dosage: document.getElementById('dosage').value,
      frequency: document.getElementById('frequency').value,
      startDate: document.getElementById('startDate').value,
      endDate: document.getElementById('endDate').value,
      refillTimes: document.getElementById('refillTimes').value,
      patientId: currentPatientId
    };

    try {
      const response = await fetch('/api/prescriptions', {
        method: formData.prescriptionId ? 'PUT' : 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      const result = await response.json();
      
      if (result.success) {
        alert('Prescription saved successfully!');
        loadPrescriptions(currentPatientId);
        resetForm();
      } else {
        alert(result.message || 'Error saving prescription');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('An error occurred while saving the prescription');
    }
  });
});

function editPrescription(id) {
  const row = document.querySelector(`tr[data-prescription-id="${id}"]`);
  if (!row) return;

  const cells = row.cells;
  
  document.getElementById('prescriptionId').value = id;
  document.getElementById('medicationName').value = cells[0].textContent;
  document.getElementById('dosage').value = cells[1].textContent;
  document.getElementById('frequency').value = cells[2].textContent;
  document.getElementById('startDate').value = formatDateForInput(cells[3].textContent);
  document.getElementById('endDate').value = formatDateForInput(cells[4].textContent);
  document.getElementById('refillTimes').value = cells[6].textContent;
  
  document.getElementById('formTitle').textContent = 'Edit Prescription';
  
  // Scroll to the form
  document.querySelector('.prescription-form').scrollIntoView({ behavior: 'smooth' });
}

function deletePrescription(id) {
  if (confirm('Are you sure you want to delete this prescription?')) {
    fetch(`/api/prescriptions/${id}`, {
      method: 'DELETE'
    })
    .then(response => response.json())
    .then(result => {
      if (result.success) {
        alert('Prescription deleted successfully!');
        loadPrescriptions(currentPatientId);
      } else {
        alert(result.message || 'Error deleting prescription');
      }
    })
    .catch(error => {
      console.error('Error:', error);
      alert('An error occurred while deleting the prescription');
    });
  }
}

function resetForm() {
  document.getElementById('prescriptionForm').reset();
  document.getElementById('prescriptionId').value = '';
  document.getElementById('formTitle').textContent = 'Add New Prescription';
}

function formatDateForInput(dateString) {
  const date = new Date(dateString);
  return date.toISOString().split('T')[0];
}
</script>
