<%- include('../partials/header', {title: 'Appointments', stylesheetName: 'styles', headerTitle: 'Appointments' }) %>
<%- include('../partials/patientNav') %>

<div class="medication-container">
<div id="confirmation-modal" class="modal" aria-hidden="true">
  <div class="modal-content">
    <p>Are you sure you want to cancel this appointment?</p>
    <div class="modal-buttons">
      <button id="confirm-cancel" class="modal-btn confirm">Yes</button>
      <button id="cancel-cancel" class="modal-btn cancel">No</button>
    </div>
  </div>
</div>

<div id="reschedule-modal" class="modal" aria-hidden="true">
  <div class="modal-content">
    <h3>Reschedule Appointment</h3>
    <form id="reschedule-form">
      <div class="form-group">
        <label for="new-date">New Date:</label>
        <input type="text" id="new-date" class="dropdown" placeholder="Choose a date" required autocomplete="off">
      </div>
      <div class="form-group">
        <label for="new-time">New Time:</label>
        <select id="new-time" class="dropdown" required>
          <option value="" disabled selected>Select time</option>
        </select>
      </div>
      <div class="modal-buttons">
        <button type="submit" id="confirm-reschedule" class="modal-btn confirm">Reschedule</button>
        <button type="button" id="cancel-reschedule" class="modal-btn cancel">Cancel</button>
      </div>
    </form>
  </div>
</div>

<div id="success-message" class="alert success" style="display: none;">
  Appointment rescheduled successfully!
</div>

  <div class="top-strip"></div>
  <div class="tabs">
    <div
      class="tab <%= activeTab === 'upcoming' ? 'active' : '' %>"
      onclick="location.href='/appointments?activeTab=upcoming'"
    >
      upcoming
    </div>
    <div
      class="tab <%= activeTab === 'missed' ? 'active' : '' %>"
      onclick="location.href='/appointments?activeTab=missed'"
    >
      missed
    </div>
  </div>
  

  <div class="content-body">
    <% if (activeTab === 'upcoming') { %>
      <div class="table-wrapper">
        <table>
          <% if (appointments && appointments.length > 0) { %>
          <thead>
            <tr>
              <th>Date</th>
              <th>Time</th>
              <th>Doctor</th>
              <th>Room</th>
              <th>Floor</th>
            </tr>
          </thead>
          <tbody>
            <% appointments.forEach(appointment => { %>
            <tr>
              <td><%= appointment.date %></td>
              <td><%= appointment.time %></td>
              <td><%= appointment.doctorName %></td>
              <td><%= appointment.roomID %></td>
              <td><%= appointment.floorNumber %></td>
              <td class="pay-btn-cell">
                <button
                  class="pay-btn cancel"
                  data-id="<%= appointment.appointmentID %>"
                >
                  Cancel
                </button>
              </td>
              <td class="pay-btn-cell">
                <button class="pay-btn reschedule" 
                  data-id="<%= appointment.appointmentID %>"
                  data-doctor="<%= appointment.doctorName %>"
                  data-specialty="<%= appointment.specialty || '' %>"
                >
                  Reschedule
                </button>
              </td>
            </tr>
            <% }); %>
          </tbody>
          <% } else { %>
          <thead>
            <tr>
              <th colspan="7">No upcoming appointments found</th>
            </tr>
          </thead>
          <tbody style="display: none">
          </tbody>
          <% } %>
        </table>
      </div>
    <% } else if (activeTab === 'missed') { %>
      <div class="table-wrapper">
        <table>
          <% if (Cancelappointments && Cancelappointments.length > 0) { %>
          <thead>
            <tr>
              <th>Date</th>
              <th>Time</th>
              <th>Doctor</th>
              <th>Room</th>
              <th>Floor</th>
            </tr>
          </thead>
          <tbody>
            <% Cancelappointments.forEach(appointment => { %>
            <tr>
              <td><%= appointment.date %></td>
              <td><%= appointment.time %></td>
              <td><%= appointment.doctorName %></td>
              <td><%= appointment.roomID %></td>
              <td><%= appointment.floorNumber %></td>
              <td class="pay-btn-cell">
                <button
                  class="pay-btn reschedule"
                  data-id="<%= appointment.appointmentID %>"
                  data-doctor="<%= appointment.doctorName %>"
                  data-specialty="<%= appointment.specialty || '' %>"
                >
                  Reschedule
                </button>
              </td>
            </tr>
            <% }); %>
          </tbody>
          <% } else { %>
          <thead>
            <tr>
              <th colspan="6">No missed appointments found</th>
            </tr>
          </thead>
          <tbody style="display: none">
          </tbody>
          <% } %>
        </table>
      </div>
    <% } %>
    
  </div>
  
  
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    let appointmentIdToCancel = null;
    let appointmentIdToReschedule = null;
    let appointmentDoctorSpecialty = null;
    let flatpickrInstance = null;

    function showCancelModal(appointmentId) {
      appointmentIdToCancel = appointmentId;
      const modal = document.getElementById("confirmation-modal");
      modal.style.display = "flex";
      modal.setAttribute("aria-hidden", "false"); 
    }

    function showRescheduleModal(appointmentId, doctorName, specialty) {
      appointmentIdToReschedule = appointmentId;
      const modal = document.getElementById("reschedule-modal");
      modal.style.display = "flex";
      modal.setAttribute("aria-hidden", "false");
      
      // If specialty is provided, use it; otherwise we'll need to fetch it
      if (specialty) {
        appointmentDoctorSpecialty = specialty;
        initializeDatePicker(specialty);
      } else {
        // In a real implementation, you would fetch the doctor's specialty here
        // For now, we'll assume a default specialty for testing
        fetch(`/doctor-specialty/${encodeURIComponent(doctorName)}`)
          .then(response => response.json())
          .then(data => {
            appointmentDoctorSpecialty = data.specialty;
            initializeDatePicker(data.specialty);
          })
          .catch(error => {
            console.error("Error fetching doctor specialty:", error);
            // Fallback to a default specialty if needed
            appointmentDoctorSpecialty = "General Medicine";
            initializeDatePicker("General Medicine");
          });
      }
    }

    function showSuccessMessage() {
      const successMsg = document.getElementById("success-message");
      successMsg.style.display = "block";
      
      // Auto-hide the message after 5 seconds
      setTimeout(() => {
        successMsg.style.display = "none";
      }, 5000);
    }

    function initializeDatePicker(specialty) {
      // Fetch available days from the server
      fetch(`/availability/days?specialty=${encodeURIComponent(specialty)}`)
        .then(response => response.json())
        .then(data => {
          if (Array.isArray(data)) {
            const availableDates = data.flatMap(day => getWeekdaysForTwoMonths(day));
            
            // Initialize flatpickr
            if (flatpickrInstance) {
              flatpickrInstance.destroy();
            }
            
            flatpickrInstance = flatpickr("#new-date", {
              dateFormat: "Y-m-d",
              minDate: "today",
              disableMobile: true,
              allowInput: true,
              enable: availableDates.map(date => new Date(date)),
              onDayCreate: function(dObj, dStr, fp, dayElem) {
                const date = fp.formatDate(dayElem.dateObj, "Y-m-d");
                if (availableDates.includes(date)) {
                  dayElem.classList.add("available");
                } else {
                  dayElem.classList.add("unavailable");
                }
              },
              onChange: function(selectedDates, dateStr) {
                updateTimeDropdown(dateStr, specialty);
              }
            });
          } else {
            console.error("Invalid data format returned from server:", data);
          }
        })
        .catch(error => {
          console.error("Error fetching available days:", error);
        });
    }

    function getWeekdaysForTwoMonths(weekday) {
      const today = new Date();
      const daysOfWeek = {
        Sunday: 0,
        Monday: 1,
        Tuesday: 2,
        Wednesday: 3,
        Thursday: 4,
        Friday: 5,
        Saturday: 6,
      };
      
      if (!(weekday in daysOfWeek)) {
        console.error(`Invalid weekday: ${weekday}`);
        return [];
      }

      const targetDay = daysOfWeek[weekday];
      const dates = [];
      const twoMonthsFromToday = new Date();
      twoMonthsFromToday.setMonth(today.getMonth() + 1);

      let currentDate = new Date(today);

      while (currentDate <= twoMonthsFromToday) {
        const currentDay = currentDate.getDay();
        // Exclude Saturday (6) and Sunday (0)
        if (currentDay === targetDay && currentDay !== 0 && currentDay !== 6) {
          dates.push(currentDate.toISOString().split("T")[0]);
        }
        currentDate.setDate(currentDate.getDate() + 1);
      }

      return dates;
    }

    function updateTimeDropdown(selectedDate, specialty) {
      if (!selectedDate || !specialty) return;
      
      const timeDropdown = document.getElementById("new-time");
      timeDropdown.innerHTML = '<option value="" disabled selected>Select time</option>';
      
      const dateObj = new Date(selectedDate);
      const daysOfWeek = [
        "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"
      ];
      const dayName = daysOfWeek[dateObj.getUTCDay()];
      
      fetch(`/availability/times?specialty=${encodeURIComponent(specialty)}&day=${dayName}`)
        .then(response => response.json())
        .then(data => {
          data.forEach(time => {
            const option = document.createElement("option");
            option.value = time;
            option.textContent = time;
            timeDropdown.appendChild(option);
          });
        })
        .catch(error => {
          console.error("Error fetching available times:", error);
        });
    }

    function closeRescheduleModal() {
      const modal = document.getElementById("reschedule-modal");
      modal.style.display = "none";
      modal.setAttribute("aria-hidden", "true");
      appointmentIdToReschedule = null;
      appointmentDoctorSpecialty = null;
      document.getElementById("reschedule-form").reset();
      
      if (flatpickrInstance) {
        flatpickrInstance.destroy();
        flatpickrInstance = null;
      }
    }

    function closeModal() {
      const modal = document.getElementById("confirmation-modal");
      modal.style.display = "none";
      modal.setAttribute("aria-hidden", "true"); 
      appointmentIdToCancel = null; 
    }

    document
      .getElementById("confirm-cancel")
      .addEventListener("click", async () => {
        if (appointmentIdToCancel) {
          const button = document.getElementById("confirm-cancel");
          button.disabled = true; 
          button.textContent = "Cancelling...";

          try {
            const response = await fetch(
              `/appointments/${appointmentIdToCancel}/cancel`,
              {
                method: "POST",
                headers: { "Content-Type": "application/json" },
              }
            );

            if (response.ok) {
              document
                .querySelector(`[data-id='${appointmentIdToCancel}']`)
                .closest("tr")
                .remove();
              closeModal();
            } else {
              alert("Failed to cancel the appointment. Please try again.");
            }
          } catch (error) {
            console.error("Error canceling appointment:", error);
            alert("An error occurred. Please try again later.");
          } finally {
            button.disabled = false;
            button.textContent = "Yes";
          }
        }
      });

    document.getElementById("reschedule-form").addEventListener("submit", async (event) => {
      event.preventDefault();
      
      if (appointmentIdToReschedule) {
        const button = document.getElementById("confirm-reschedule");
        button.disabled = true;
        button.textContent = "Rescheduling...";
        
        const newDate = document.getElementById("new-date").value;
        const newTime = document.getElementById("new-time").value;
        
        if (!newDate || !newTime) {
          alert("Please select both date and time");
          button.disabled = false;
          button.textContent = "Reschedule";
          return;
        }
        
        try {
          const response = await fetch(`/appointments/${appointmentIdToReschedule}/reschedule`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              New_Appointment_Date: newDate,
              New_Appointment_Time: newTime
            })
          });
          
          if (response.ok) {
            // Close the modal first
            closeRescheduleModal();
            
            // Show success message
            showSuccessMessage();
            
            // Refresh the page after a short delay
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            const errorData = await response.json();
            alert(`Failed to reschedule: ${errorData.error || 'Please try again'}`);
          }
        } catch (error) {
          console.error("Error rescheduling appointment:", error);
          alert("An error occurred. Please try again later.");
        } finally {
          button.disabled = false;
          button.textContent = "Reschedule";
        }
      }
    });

    document
      .getElementById("cancel-cancel")
      .addEventListener("click", closeModal);
      
    document
      .getElementById("cancel-reschedule")
      .addEventListener("click", closeRescheduleModal);

    document.querySelectorAll("table").forEach(table => {
      table.addEventListener("click", (event) => {
        if (event.target.classList.contains("cancel")) {
          const appointmentId = event.target.dataset.id;
          if (appointmentId) {
            showCancelModal(appointmentId);
          }
        }
        if (event.target.classList.contains("reschedule")) {
          const appointmentId = event.target.dataset.id;
          const doctorName = event.target.dataset.doctor;
          const specialty = event.target.dataset.specialty;
          if (appointmentId) {
            showRescheduleModal(appointmentId, doctorName, specialty);
          }
        }
      });
    });

    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        closeModal();
        closeRescheduleModal();
      }
    });

    document
      .getElementById("confirmation-modal")
      .addEventListener("click", (event) => {
        if (event.target.id === "confirmation-modal") {
          closeModal();
        }
      });
      
    document
      .getElementById("reschedule-modal")
      .addEventListener("click", (event) => {
        if (event.target.id === "reschedule-modal") {
          closeRescheduleModal();
        }
      });
  });
</script>

<script src="js/main.js"></script>
<%- include('../partials/footer') %>
